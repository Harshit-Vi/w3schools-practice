//////C++ Variables

Variables are containers for storing data values.

///////In C++, there are different types of variables (defined with different keywords), for example:

    int - stores integers (whole numbers), without decimals, such as 123 or -123
    double - stores floating point numbers, with decimals, such as 19.99 or -19.99
    char - stores single characters, such as 'a' or 'B'. Char values are surrounded by single quotes
    string - stores text, such as "Hello World". String values are surrounded by double quotes
    bool - stores values with two states: true or false

///////Declaring (Creating) Variables

To create a variable, specify the type and assign it a value:

#Syntax
type variableName = value;

Where type is one of C++ types (such as int), and variableName is the name of the variable (such as x or myName). The equal sign is used to assign values to the variable.

////Create a variable called myNum of type int and assign it the value 15

//////  Code //////
int myNum = 15;
cout << myNum;

You can also declare a variable without assigning the value, and assign the value later

////// Code //////
int myNum;
myNum = 15;
cout << myNum;

////// Changing Variable Values
Note that if you assign a new value to an existing variable, it will overwrite the previous value:

////// Code ///////
int myNum = 15;  // myNum is 15
myNum = 10;  // Now myNum is 10
cout << myNum;  // Outputs 10 

////// Declare Many Variables
To declare more than one variable of the same type, use a comma-separated list:

/////Code/////

int x = 5, y = 6, z = 50;
cout << x + y + z;

/////One Value to Multiple Variables
You can also assign the same value to multiple variables in one line:

///// Code /////
int x, y, z;
x = y = z = 50;
cout << x + y + z;

///// C++ Identifiers

All C++ variables must be identified with unique names.
These unique names are called identifiers.

Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume).

Note: It is recommended to use descriptive names in order to create understandable and maintainable code:

/////Code/////

// Good
int minutesPerHour = 60;

// OK, but not so easy to understand what m actually is
int m = 60;

]The general rules for naming variables are:

    Names can contain letters, digits and underscores
    Names must begin with a letter or an underscore (_)
    Names are case-sensitive (myVar and myvar are different variables)
    Names cannot contain whitespaces or special characters like !, #, %, etc.
    Reserved words (like C++ keywords, such as int) cannot be used as names

///// Constants

When you do not want others (or yourself) to change existing variable values, use the const keyword (this will declare the variable as "constant", which means unchangeable and read-only):

Example:
const int myNum = 15;  // myNum will always be 15
myNum = 10;  // error: assignment of read-only variable 'myNum'

You should always declare the variable as constant when you have values that are unlikely to change:

Example
const int minutesPerHour = 60;
Notes On Constants

When you declare a constant variable, it must be assigned with a value:

Example
Like this:
const int minutesPerHour = 60;

This however, will not work:
const int minutesPerHour;
minutesPerHour = 60; // error 

